# BuildBinaries.yml
# Github workflow to build micronucleus binaries for different platforms
#
# Copyright (C) 2021  Armin Joachimsmeyer based on the valuable work of Thomas Quinot https://github.com/quinot
# https://github.com/ArminJo/Github-Actions
#
name: BuildBinaries

on:
  push:
#    tags-ignore:
#    - '*.*' # do not run it on release build
    paths:
    - '**/comandline/library/**'
    - '**/comandline/micronucleus.c'
    - '**/comandline/builds/**/package.json'
    - '**BuildBinaries.yml'

jobs:
  build-all-executables:
    strategy:
      matrix:
         include:
         - os: ubuntu-latest
           target-dir: x86_64-linux-gnu
           shell: bash {0}

         - os: ubuntu-latest
           target-dir: i686-linux-gnu
           container: debian:buster
           shell: bash {0}

         - os: ubuntu-latest
           target-dir: arm-linux-gnueabihf
           container: debian:buster
           shell: bash {0}

         - os: ubuntu-latest
           target-dir: aarch64-linux-gnu
           container: debian:buster
           shell: bash {0}

         - os: macos-latest
           target-dir: x86_64-apple-darwin
           shell: bash {0}

         - os: windows-2019
           shell: msys2 {0}
           target-dir: i686-mingw32

         - os: windows-2019
           shell: msys2 {0}
           target-dir: x86_64-mingw32

    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    defaults:
      run:
        shell: ${{ matrix.shell }}

    steps:

    - name: install git for Linux container
      if: runner.os == 'Linux'
      run: |
        if [[ -z "$(which git)" ]]; then
          echo "installing missing git"
          apt-get update
          apt-get install --yes git
          GIT_DIR=$GITHUB_WORKSPACE
        fi

    - uses: actions/checkout@v2

    - name: install Linux 64 dependencies and run make
      if: runner.os == 'Linux' && matrix.target-dir == 'x86_64-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install libusb-dev
        cd commandline
        make

    - name: install Linux 32 dependencies and run make
      if: runner.os == 'Linux' && matrix.target-dir == 'i686-linux-gnu'
      run: |
        ls -la $GITHUB_WORKSPACE
        dpkg --add-architecture i386
        apt-get update
        echo apt-get install --yes make crossbuild-essential-i386 libusb-dev:i386
        apt-get install --yes make crossbuild-essential-i386 libusb-dev:i386
        cd commandline
        make CC=i686-linux-gnu-gcc

    - name: install Linux armhf dependencies and run make
      if: runner.os == 'Linux' && matrix.target-dir == 'arm-linux-gnueabihf'
      run: |
        dpkg --add-architecture armhf
        apt-get update
        apt-get install --yes make crossbuild-essential-armhf libusb-dev:armhf
        cd commandline
        make CC=arm-linux-gnueabihf-gcc

    - name: install Linux arm64 dependencies and run make
      if: runner.os == 'Linux' && matrix.target-dir == 'aarch64-linux-gnu'
      run: |
        dpkg --add-architecture arm64
        apt-get update
        apt-get install --yes make crossbuild-essential-arm64 libusb-dev:arm64
        cd commandline
        make CC=aarch64-linux-gnu-gcc

    - name: install macOS dependencies and run make
      if: runner.os == 'macOS'
      run: |
        brew install libusb-compat # libusb is installed too for libusb-compat
        LIBUSB_PREFIX=$(brew --prefix libusb-compat)
        PKG_CONFIG_PATH=$LIBUSB_PREFIX/lib/pkgconfig
        echo PKG_CONFIG_PATH=$PKG_CONFIG_PATH
        cd commandline
        echo make USBFLAGS="$(pkg-config --cflags libusb)"
        make USBFLAGS="$(pkg-config --cflags libusb)"
        ls -l

    - name: Install Windows i686 build system
      if: runner.os == 'Windows' && matrix.target-dir == 'i686-mingw32'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        #install: git base-devel binutils mingw-w64-x86_64-toolchain make zip mingw-w64-x86_64-libusb-win32
        install: git base-devel mingw-w64-i686-toolchain zip mingw-w64-i686-libusb-win32
        update: true

    - name: make i686 Windows exe
      if: runner.os == 'Windows' && matrix.target-dir == 'i686-mingw32'
      run: |
        TARGET_DIR=${{ matrix.target-dir }}
        cd commandline
        PATH="/mingw32/bin:$PATH"
        mingw32-make
        if [[ ! -d builds/$TARGET_DIR/ ]]; then mkdir builds/$TARGET_DIR; fi
        echo mv micronucleus.exe builds/$TARGET_DIR
        mv micronucleus.exe builds/$TARGET_DIR
        echo cp -p /mingw32/bin/libusb*.dll builds/$TARGET_DIR
        cp -p /mingw32/bin/libusb*.dll builds/$TARGET_DIR

    - name: Install Windows x86_64 build system
      if: runner.os == 'Windows' && matrix.target-dir == 'x86_64-mingw32'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        install: git base-devel binutils mingw-w64-x86_64-toolchain make zip mingw-w64-x86_64-libusb-win32
        update: true

    - name: make x86_64 Windows exe
      if: runner.os == 'Windows' && matrix.target-dir == 'x86_64-mingw32'
      run: |
        TARGET_DIR=${{ matrix.target-dir }}
        cd commandline
        mingw32-make
        if [[ ! -d builds/$TARGET_DIR/ ]]; then mkdir builds/$TARGET_DIR; fi
        echo mv micronucleus.exe builds/$TARGET_DIR
        mv micronucleus.exe builds/$TARGET_DIR
        echo cp -p /mingw64/bin/libusb*.dll builds/$TARGET_DIR
        cp -p /mingw64/bin/libusb*.dll builds/$TARGET_DIR

    - name: create tarballs and move them to builds directory
      if: runner.os != 'Windows'
      run: |
        TARGET_DIR=${{ matrix.target-dir }}
        TARBALL_NAME=micronucleus-cli-2.5-$TARGET_DIR.tar.gz
        TARBALL_NAME_PIO=micronucleus-cli-2.5-pio-$TARGET_DIR.tar.gz
        set -o verbose
        mkdir micronucleus # temporary tar directory
        chmod +x commandline/micronucleus
        mv commandline/micronucleus micronucleus # move executable in right directory
        tar -czvf $TARBALL_NAME micronucleus # create arduino tarball in base directory
        cp commandline/builds/$TARGET_DIR/package.json micronucleus # add package.json for PIO tarball
        cd micronucleus
        tar -czvf $TARBALL_NAME_PIO micronucleus package.json # create PIO tarball in micronucleus directory
        ls -l

        cd ../commandline
        set +o verbose
        if [[ ! -d builds/$TARGET_DIR/ ]]; then
          # build new directory
          mkdir builds/$TARGET_DIR
        fi

        echo ls -l builds/$TARGET_DIR
        ls -l builds/$TARGET_DIR # show old content which we had checked out

        # move and process executable
        if [[ ! -e builds/$TARGET_DIR/micronucleus ]]; then
          echo mv ../micronucleus/micronucleus builds/$TARGET_DIR
          mv ../micronucleus/micronucleus builds/$TARGET_DIR
          echo git -add builds/$TARGET_DIR/micronucleus
          git add builds/$TARGET_DIR/micronucleus
        else
          echo mv ../micronucleus/micronucleus builds/$TARGET_DIR
          mv ../micronucleus/micronucleus builds/$TARGET_DIR
        fi

        # move and process Arduino tarball
        if [[ ! -e builds/$TARGET_DIR/$TARBALL_NAME ]]; then
          echo mv ../$TARBALL_NAME builds/$TARGET_DIR
          mv ../$TARBALL_NAME builds/$TARGET_DIR
          echo git -add builds/$TARGET_DIR/$TARBALL_NAME
          git add builds/$TARGET_DIR/$TARBALL_NAME
        else
          echo mv ../$TARBALL_NAME builds/$TARGET_DIR
          mv ../$TARBALL_NAME builds/$TARGET_DIR
        fi

        # move and process PlatformIO tarball
        if [[ ! -e builds/$TARGET_DIR/$TARBALL_NAME_PIO ]]; then
          echo mv ../micronucleus/$TARBALL_NAME_PIO builds/$TARGET_DIR
          mv ../micronucleus/$TARBALL_NAME_PIO builds/$TARGET_DIR
          echo git -add builds/$TARGET_DIR/$TARBALL_NAME_PIO
          git add builds/$TARGET_DIR/$TARBALL_NAME_PIO
        else
          echo mv ../micronucleus/$TARBALL_NAME_PIO builds/$TARGET_DIR
          mv ../micronucleus/$TARBALL_NAME_PIO builds/$TARGET_DIR
        fi
        # show new content
        echo ls -l builds/$TARGET_DIR
        ls -l builds/$TARGET_DIR

    - name: Commit and push files
      run: |
        TARGET_DIR=${{ matrix.target-dir }}
        cd commandline/builds/$TARGET_DIR
        ls -l
        #echo GITHUB_ACTOR=$GITHUB_ACTOR # the one who made the commit which started this workflow
        git config user.name "$GITHUB_ACTOR"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        #echo git status:
        #git status
        echo git commit --message=\"exetutable for $TARGET_DIR\" --verbose micronucleus*
        git commit --message="exetutable for $TARGET_DIR" --verbose micronucleus*
        # Amend does not work for me :-(
        #git commit --amend --no-edit --verbose micronucleus*
        if [ $? -ne 0 ]; then
          echo "nothing to commit"
          exit 0
        fi

        # required to rebase with the push results of the parallel jobs
        # Lets hope that we do not run into a race condition between pull and push
        #git pull --ff-only --verbose # -> Not possible to fast-forward, aborting
        echo "git pull --verbose # required to rebase with the push results of the parallel jobs"
        git pull --verbose # -> Merge made by the 'recursive' strategy

        # not required for us
        #repo_uri="https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git"
        #git remote set-url "$remote_name" "$repo_uri" # includes access token
        #git push --force origin ${{github.ref}}

        echo git push
        git push
        if [[ $? -ne 0 ]]; then
          # try 4 times with random delays
          for ((i = 0 ; i < 4 ; i++)); do
            RETRY_DELAY=$[ ( $RANDOM % 10 )  + 10 ]
            echo "Race condition, retry in ${RETRY_DELAY} seconds"
            sleep ${RETRY_DELAY}s
            echo git pull --verbose
            git pull --verbose
            if [[ $? -eq 0 ]]; then
              echo git push
              git push
            fi
            if [[ $? -eq 0 ]]; then break; fi
          done
        fi
